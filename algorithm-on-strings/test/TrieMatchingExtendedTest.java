import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

class TrieMatchingExtendedTest {

    private static Stream<Arguments> prepareDate() {
        String firstCase = "AAA\n" +
                "1\n" +
                "AA";
        String secondCase = "ACATA\n" +
                "3\n" +
                "AT\n" +
                "A\n" +
                "AG";
        String thirdCase = "AATCGGGTTCAATCGGGGT\n" +
                "2\n" +
                "ATCG\n" +
                "GGGT";
        String forthCasen" +
                "2\n" +
                "ACC\n" +
                "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC";
        return Stream.of(
                Arguments.arguments(firstCase.getBytes(), "0 1 "),
                Arguments.arguments(secondCase.getBytes(), "0 2 4 "),
                Arguments.arguments(thirdCase.getBytes(), "1 4 11 15 "),
                Arguments.arguments(forthCase.getBytes(), "0 59 88 125 148 153 154 155 156 157 158 217 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 379 404 405 406 407 408 409 410 469 520 578 579 580 581 582 583 584 585 586 587 588 589 590 649 694 720 721 722 723 724 725 726 785 829 879 921 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 1008 1011 1041 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1138 1162 1166 1221 1222 1223 1224 1225 1226 1227 1228 1287 1288 1289 1290 1291 1292 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1419 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1632 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1725 1741 1758 1759 1760 1819 1858 1888 1912 1920 1935 1948 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2099 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2213 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 ")
        );
    }

    @ParameterizedTest
    @MethodSource("prepareDate")
    void test(byte[] scanner, String result) throws IOException {
        final long start = System.currentTimeMillis();
        System.setIn(new ByteArrayInputStream(scanner));
        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        final PrintStream out = System.out;
        System.setOut(new PrintStream(outputStream));
        new TrieMatchingExtended().run();
        assertEquals(result/*.replace(" ","\n")*/, outputStream.toString().replace("\r\n", " "));
        System.setOut(out);
        System.out.println(System.currentTimeMillis() - start);
    }

}